[1mdiff --git a/alembic/versions/58398eea5e00_add_reports_and_audit_logs.py b/alembic/versions/58398eea5e00_add_reports_and_audit_logs.py[m
[1mindex 6d1f14e..f3fb6e9 100644[m
[1m--- a/alembic/versions/58398eea5e00_add_reports_and_audit_logs.py[m
[1m+++ b/alembic/versions/58398eea5e00_add_reports_and_audit_logs.py[m
[36m@@ -7,7 +7,7 @@[m [mCreate Date: 2025-08-30 19:20:41.620587[m
 """[m
 from alembic import op[m
 import sqlalchemy as sa[m
[31m-[m
[32m+[m[32mfrom sqlalchemy.dialects import postgresql[m
 [m
 # revision identifiers, used by Alembic.[m
 revision = '58398eea5e00'[m
[36m@@ -17,12 +17,42 @@[m [mdepends_on = None[m
 [m
 [m
 def upgrade() -> None:[m
[31m-    # ### commands auto generated by Alembic - please adjust! ###[m
[31m-    pass[m
[31m-    # ### end Alembic commands ###[m
[32m+[m[32m    # Create reports table[m
[32m+[m[32m    op.create_table('reports',[m
[32m+[m[32m        sa.Column('id', sa.UUID(), nullable=False),[m
[32m+[m[32m        sa.Column('tenant_id', sa.UUID(), nullable=False),[m
[32m+[m[32m        sa.Column('uploaded_by', sa.UUID(), nullable=False),[m
[32m+[m[32m        sa.Column('filename', sa.VARCHAR(), nullable=False),[m
[32m+[m[32m        sa.Column('status', postgresql.ENUM('PROCESSING', 'DONE', 'FAILED', 'DELETED_SOFT', name='reportstatus'), nullable=False),[m
[32m+[m[32m        sa.Column('score', sa.DOUBLE_PRECISION(precision=53), nullable=True),[m
[32m+[m[32m        sa.Column('finding_count', sa.INTEGER(), nullable=False),[m
[32m+[m[32m        sa.Column('uploaded_at', postgresql.TIMESTAMP(), nullable=False),[m
[32m+[m[32m        sa.Column('source_object_key', sa.VARCHAR(), nullable=False),[m
[32m+[m[32m        sa.Column('conclusion_object_key', sa.VARCHAR(), nullable=True),[m
[32m+[m[32m        sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='reports_tenant_id_fkey'),[m
[32m+[m[32m        sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], name='reports_uploaded_by_fkey'),[m
[32m+[m[32m        sa.PrimaryKeyConstraint('id', name='reports_pkey')[m
[32m+[m[32m    )[m
[32m+[m[41m    [m
[32m+[m[32m    # Create report_audit_logs table[m
[32m+[m[32m    op.create_table('report_audit_logs',[m
[32m+[m[32m        sa.Column('id', sa.UUID(), nullable=False),[m
[32m+[m[32m        sa.Column('report_id', sa.UUID(), nullable=False),[m
[32m+[m[32m        sa.Column('actor_user_id', sa.UUID(), nullable=True),[m
[32m+[m[32m        sa.Column('action', postgresql.ENUM('UPLOAD', 'PROCESS_START', 'PROCESS_DONE', 'PROCESS_FAIL', 'SOFT_DELETE', 'RESTORE', name='auditaction'), nullable=False),[m
[32m+[m[32m        sa.Column('note', sa.VARCHAR(), nullable=True),[m
[32m+[m[32m        sa.Column('created_at', postgresql.TIMESTAMP(), nullable=False),[m
[32m+[m[32m        sa.ForeignKeyConstraint(['actor_user_id'], ['users.id'], name='report_audit_logs_actor_user_id_fkey'),[m
[32m+[m[32m        sa.ForeignKeyConstraint(['report_id'], ['reports.id'], name='report_audit_logs_report_id_fkey'),[m
[32m+[m[32m        sa.PrimaryKeyConstraint('id', name='report_audit_logs_pkey')[m
[32m+[m[32m    )[m
 [m
 [m
 def downgrade() -> None:[m
[31m-    # ### commands auto generated by Alembic - please adjust! ###[m
[31m-    pass[m
[31m-    # ### end Alembic commands ###[m
[32m+[m[32m    # Drop tables in reverse order[m
[32m+[m[32m    op.drop_table('report_audit_logs')[m
[32m+[m[32m    op.drop_table('reports')[m
[32m+[m[41m    [m
[32m+[m[32m    # Drop enums[m
[32m+[m[32m    op.execute('DROP TYPE IF EXISTS auditaction')[m
[32m+[m[32m    op.execute('DROP TYPE IF EXISTS reportstatus')[m
[1mdiff --git a/app/api/reports.py b/app/api/reports.py[m
[1mindex b77f079..c63de42 100644[m
[1m--- a/app/api/reports.py[m
[1m+++ b/app/api/reports.py[m
[36m@@ -2,11 +2,14 @@[m
 Reports API endpoints for file uploads.[m
 """[m
 import uuid[m
[32m+[m[32mimport logging[m
 from datetime import datetime[m
 from typing import Optional[m
 from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Query[m
 from sqlalchemy.ext.asyncio import AsyncSession[m
 [m
[32m+[m[32mlogger = logging.getLogger(__name__)[m
[32m+[m
 from app.database import get_db[m
 from app.models.user import User, UserRole[m
 from app.models.report import Report, ReportAuditLog, ReportStatus, AuditAction[m
[36m@@ -41,6 +44,10 @@[m [mdef validate_file_upload(file: UploadFile) -> None:[m
     # Check content type[m
     if file.content_type not in ALLOWED_EXTENSIONS.values():[m
         raise UnsupportedFileTypeError(f"Invalid content type: {file.content_type}")[m
[32m+[m[41m    [m
[32m+[m[32m    # Check file size[m
[32m+[m[32m    if file.size and file.size > MAX_FILE_SIZE:[m
[32m+[m[32m        raise FileTooLargeError(f"File too large. Max size: {settings.max_upload_mb}MB")[m
 [m
 [m
 @router.post("/", response_model=ReportOut, status_code=201)[m
[36m@@ -71,9 +78,10 @@[m [masync def upload_report([m
             )[m
         target_tenant_id = current_user.tenant_id[m
     [m
[31m-    # Generate unique object key[m
[32m+[m[32m    # Generate unique object key following the specified convention[m
     file_ext = file.filename.lower().split('.')[-1][m
[31m-    object_key = f"reports/{target_tenant_id}/{uuid.uuid4()}.{file_ext}"[m
[32m+[m[32m    report_uuid = uuid.uuid4()[m
[32m+[m[32m    object_key = f"tenants/{target_tenant_id}/reports/{report_uuid}/source/{file.filename}"[m
     [m
     try:[m
         # Ensure bucket exists[m
[36m@@ -90,6 +98,7 @@[m [masync def upload_report([m
         [m
         # Create report record[m
         report = Report([m
[32m+[m[32m            id=report_uuid,  # Use the same UUID for the report[m
             tenant_id=target_tenant_id,[m
             uploaded_by=current_user.id,[m
             filename=file.filename,[m
[1mdiff --git a/app/exceptions.py b/app/exceptions.py[m
[1mindex 7cafa77..b46218e 100644[m
[1m--- a/app/exceptions.py[m
[1m+++ b/app/exceptions.py[m
[36m@@ -1,71 +1,80 @@[m
 """[m
[31m-Custom exceptions and error handlers.[m
[32m+[m[32mCustom exceptions and exception handlers for the application.[m
 """[m
[32m+[m[32mimport logging[m
 from fastapi import HTTPException, Request[m
 from fastapi.responses import JSONResponse[m
 from fastapi.exceptions import RequestValidationError[m
 from starlette.exceptions import HTTPException as StarletteHTTPException[m
[31m-import logging[m
 [m
 logger = logging.getLogger(__name__)[m
 [m
 [m
[31m-class FileUploadError(HTTPException):[m
[31m-    """Custom exception for file upload errors."""[m
[31m-    def __init__(self, detail: str, status_code: int = 400):[m
[31m-        super().__init__(status_code=status_code, detail=detail)[m
[32m+[m[32mclass UnsupportedFileTypeError(HTTPException):[m
[32m+[m[32m    """Raised when an unsupported file type is uploaded."""[m
[32m+[m[32m    def __init__(self, detail: str):[m
[32m+[m[32m        super().__init__(status_code=415, detail=detail)[m
[32m+[m
[32m+[m
[32m+[m[32mclass FileTooLargeError(HTTPException):[m
[32m+[m[32m    """Raised when a file exceeds the maximum allowed size."""[m
[32m+[m[32m    def __init__(self, detail: str):[m
[32m+[m[32m        super().__init__(status_code=413, detail=detail)[m
[32m+[m
[32m+[m
[32m+[m[32mclass StorageError(HTTPException):[m
[32m+[m[32m    """Raised when there's an error with file storage operations."""[m
[32m+[m[32m    def __init__(self, detail: str):[m
[32m+[m[32m        super().__init__(status_code=500, detail=detail)[m
 [m
 [m
[31m-class UnsupportedFileTypeError(FileUploadError):[m
[31m-    """Exception for unsupported file types."""[m
[31m-    def __init__(self, detail: str = "Unsupported file type"):[m
[31m-        super().__init__(detail=detail, status_code=415)[m
[32m+[m[32mclass ValidationError(HTTPException):[m
[32m+[m[32m    """Raised when validation fails."""[m
[32m+[m[32m    def __init__(self, detail: str):[m
[32m+[m[32m